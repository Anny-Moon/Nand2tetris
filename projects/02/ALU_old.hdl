// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a = x, b = false, sel = zx, out = xzero);
    Not16(in = xzero, out = notx);
    Mux16(a = xzero, b = notx, sel = nx, out = xnew); 

    Mux16(a = y, b = false, sel = zy, out = yzero);
    Not16(in = yzero, out = noty);
    Mux16(a = yzero, b = noty, sel = ny, out = ynew); 

    Add16(a = xnew, b = newy, out = sum);
    And16(a = xnew, b = newy, out = mult);
    
    Mux16(a = mult, b = sum, sel = f, out = preout);
    Not16(in = preout, out = notpreout);
    Mux16(a = preout, b = notpreout, sel = no, out = outout);

    Or16Way(in = outout, out = notng);
    Not(in = notng, out = ng); 
    NegComp16(in = outout, out = zr);
/*    
    Or(a = false, b = outout[1], out = ng1);
    Or(a = out[0], b = out[1], out = ng1);
    Or(a = ng1, b = out[2], out = ng2); 
    Or(a = ng2, b = out[3], out = ng3); 
    Or(a = ng3, b = out[4], out = ng4); 
    Or(a = ng4, b = out[5], out = ng5); 
    Or(a = ng5, b = out[6], out = ng6); 
    Or(a = ng6, b = out[7], out = ng7); 
    Or(a = ng7, b = out[8], out = ng8); 
    Or(a = ng8, b = out[9], out = ng9); 
    Or(a = ng9, b = out[10], out = ng10); 
    Or(a = ng10, b = out[11], out = ng11); 
    Or(a = ng11, b = out[12], out = ng12); 
    Or(a = ng12, b = out[13], out = ng13); 
    Or(a = ng13, b = out[14], out = ng14); 
    Or(a = ng14, b = out[15], out = ng15);

    Not(in = ng15, out = ng); 
    
    DMux(in = true, sel = outout[15], a = trash, b = zr);
*/
}